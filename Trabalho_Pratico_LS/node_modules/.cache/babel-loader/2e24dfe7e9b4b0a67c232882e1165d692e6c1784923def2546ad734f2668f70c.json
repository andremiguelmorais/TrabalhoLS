{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\andre\\\\TrabalhoLS\\\\Trabalho_Pratico_LS\\\\src\\\\components\\\\gameboard\\\\GameBoard.component.jsx\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from \"react\";\nimport \"./game-board.css\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst ROWS = 6;\nconst COLS = 7;\nfunction GameBoard({\n  opponent\n}) {\n  _s();\n  const [board, setBoard] = useState(Array(ROWS).fill().map(() => Array(COLS).fill(null)));\n  const [currentPlayer, setCurrentPlayer] = useState('游댮');\n  const [gameOver, setGameOver] = useState(false);\n\n  // Fun칞칚o para reiniciar o jogo\n  const resetGame = () => {\n    setBoard(Array(ROWS).fill().map(() => Array(COLS).fill(null)));\n    setCurrentPlayer('游댮');\n    setGameOver(false);\n  };\n\n  // Fun칞칚o chamada ao clicar em uma coluna\n  const handleColumnClick = colIndex => {\n    if (gameOver) return;\n    for (let row = ROWS - 1; row >= 0; row--) {\n      if (!board[row][colIndex]) {\n        const newBoard = board.map(r => [...r]);\n        newBoard[row][colIndex] = currentPlayer;\n        setBoard(newBoard);\n        setCurrentPlayer(currentPlayer === '游댮' ? '游리' : '游댮');\n        checkForWinner(newBoard, row, colIndex);\n        break;\n      }\n    }\n  };\n\n  // Fun칞칚o para verificar se algu칠m ganhou\n  const checkForWinner = (newBoard, row, col) => {\n    if (checkDirection(newBoard, row, col, 0, 1) ||\n    // Horizontal (direita)\n    checkDirection(newBoard, row, col, 0, -1) ||\n    // Horizontal (esquerda)\n    checkDirection(newBoard, row, col, 1, 0) ||\n    // Vertical (para baixo)\n    checkDirection(newBoard, row, col, 1, 1) ||\n    // Diagonal crescente\n    checkDirection(newBoard, row, col, 1, -1)) {\n      // Diagonal decrescente\n      setGameOver(true);\n      alert(`${currentPlayer} venceu!`);\n      return;\n    }\n  };\n\n  // Fun칞칚o para verificar uma dire칞칚o espec칤fica\n  const checkDirection = (board, row, col, rowDir, colDir) => {\n    let count = 1;\n\n    // Verifica uma dire칞칚o (horizontal, vertical ou diagonal)\n    for (let i = 1; i < 4; i++) {\n      const r = row + i * rowDir;\n      const c = col + i * colDir;\n      if (r >= 0 && r < ROWS && c >= 0 && c < COLS && board[r][c] === currentPlayer) {\n        count++;\n      } else {\n        break;\n      }\n    }\n\n    // Verifica a dire칞칚o oposta\n    for (let i = 1; i < 4; i++) {\n      const r = row - i * rowDir;\n      const c = col - i * colDir;\n      if (r >= 0 && r < ROWS && c >= 0 && c < COLS && board[r][c] === currentPlayer) {\n        count++;\n      } else {\n        break;\n      }\n    }\n    return count >= 4; // Se tiver 4 pe칞as consecutivas\n  };\n\n  // Fun칞칚o para o bot jogar automaticamente\n  const botPlay = () => {\n    if (gameOver || currentPlayer === '游댮') return; // O bot s칩 joga quando for a vez dele (游리)\n\n    let colIndex = -1;\n    // Bot escolhe a primeira coluna dispon칤vel\n    for (let col = 0; col < COLS; col++) {\n      for (let row = ROWS - 1; row >= 0; row--) {\n        if (!board[row][col]) {\n          colIndex = col;\n          break;\n        }\n      }\n      if (colIndex !== -1) break;\n    }\n\n    // Faz a jogada do bot\n    if (colIndex !== -1) {\n      handleColumnClick(colIndex);\n    }\n  };\n\n  // Se o oponente for um bot, ele joga automaticamente ap칩s o jogador humano\n  useEffect(() => {\n    if (opponent === '2' && currentPlayer === '游리') {\n      const timeout = setTimeout(() => {\n        botPlay();\n      }, 500); // Delay para dar tempo de ver a jogada do jogador\n      return () => clearTimeout(timeout);\n    }\n  }, [currentPlayer, opponent, board]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"game-board\",\n      children: board.map((row, rowIndex) => /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"board-row\",\n        style: {\n          display: 'flex'\n        },\n        children: row.map((cell, colIndex) => /*#__PURE__*/_jsxDEV(\"div\", {\n          onClick: () => handleColumnClick(colIndex),\n          className: \"board-cell\",\n          style: {\n            width: 60,\n            height: 60,\n            backgroundColor: '#1e3a8a',\n            border: '2px solid white',\n            display: 'flex',\n            alignItems: 'center',\n            justifyContent: 'center',\n            fontSize: '30px',\n            cursor: gameOver ? 'not-allowed' : 'pointer'\n          },\n          children: cell\n        }, colIndex, false, {\n          fileName: _jsxFileName,\n          lineNumber: 115,\n          columnNumber: 15\n        }, this))\n      }, rowIndex, false, {\n        fileName: _jsxFileName,\n        lineNumber: 113,\n        columnNumber: 11\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 111,\n      columnNumber: 7\n    }, this), gameOver && /*#__PURE__*/_jsxDEV(\"div\", {\n      style: {\n        marginTop: \"20px\",\n        textAlign: \"center\"\n      },\n      children: /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: resetGame,\n        children: \"Reiniciar Jogo\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 141,\n        columnNumber: 11\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 140,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 110,\n    columnNumber: 5\n  }, this);\n}\n_s(GameBoard, \"q3Zs7mB7nbd7z+9tMCKZoYtAPRE=\");\n_c = GameBoard;\nexport default GameBoard;\nvar _c;\n$RefreshReg$(_c, \"GameBoard\");","map":{"version":3,"names":["React","useState","useEffect","jsxDEV","_jsxDEV","ROWS","COLS","GameBoard","opponent","_s","board","setBoard","Array","fill","map","currentPlayer","setCurrentPlayer","gameOver","setGameOver","resetGame","handleColumnClick","colIndex","row","newBoard","r","checkForWinner","col","checkDirection","alert","rowDir","colDir","count","i","c","botPlay","timeout","setTimeout","clearTimeout","children","className","rowIndex","style","display","cell","onClick","width","height","backgroundColor","border","alignItems","justifyContent","fontSize","cursor","fileName","_jsxFileName","lineNumber","columnNumber","marginTop","textAlign","_c","$RefreshReg$"],"sources":["C:/Users/andre/TrabalhoLS/Trabalho_Pratico_LS/src/components/gameboard/GameBoard.component.jsx"],"sourcesContent":["import React, { useState, useEffect } from \"react\";\r\nimport \"./game-board.css\";\r\n\r\nconst ROWS = 6;\r\nconst COLS = 7;\r\n\r\nfunction GameBoard({ opponent }) {\r\n  const [board, setBoard] = useState(Array(ROWS).fill().map(() => Array(COLS).fill(null)));\r\n  const [currentPlayer, setCurrentPlayer] = useState('游댮');\r\n  const [gameOver, setGameOver] = useState(false);\r\n\r\n  // Fun칞칚o para reiniciar o jogo\r\n  const resetGame = () => {\r\n    setBoard(Array(ROWS).fill().map(() => Array(COLS).fill(null)));\r\n    setCurrentPlayer('游댮');\r\n    setGameOver(false);\r\n  };\r\n\r\n  // Fun칞칚o chamada ao clicar em uma coluna\r\n  const handleColumnClick = (colIndex) => {\r\n    if (gameOver) return;\r\n\r\n    for (let row = ROWS - 1; row >= 0; row--) {\r\n      if (!board[row][colIndex]) {\r\n        const newBoard = board.map((r) => [...r]);\r\n        newBoard[row][colIndex] = currentPlayer;\r\n        setBoard(newBoard);\r\n        setCurrentPlayer(currentPlayer === '游댮' ? '游리' : '游댮');\r\n        checkForWinner(newBoard, row, colIndex);\r\n        break;\r\n      }\r\n    }\r\n  };\r\n\r\n  // Fun칞칚o para verificar se algu칠m ganhou\r\n  const checkForWinner = (newBoard, row, col) => {\r\n    if (checkDirection(newBoard, row, col, 0, 1) || // Horizontal (direita)\r\n        checkDirection(newBoard, row, col, 0, -1) || // Horizontal (esquerda)\r\n        checkDirection(newBoard, row, col, 1, 0) || // Vertical (para baixo)\r\n        checkDirection(newBoard, row, col, 1, 1) || // Diagonal crescente\r\n        checkDirection(newBoard, row, col, 1, -1)) { // Diagonal decrescente\r\n      setGameOver(true);\r\n      alert(`${currentPlayer} venceu!`);\r\n      return;\r\n    }\r\n  };\r\n\r\n  // Fun칞칚o para verificar uma dire칞칚o espec칤fica\r\n  const checkDirection = (board, row, col, rowDir, colDir) => {\r\n    let count = 1;\r\n    \r\n    // Verifica uma dire칞칚o (horizontal, vertical ou diagonal)\r\n    for (let i = 1; i < 4; i++) {\r\n      const r = row + i * rowDir;\r\n      const c = col + i * colDir;\r\n      if (r >= 0 && r < ROWS && c >= 0 && c < COLS && board[r][c] === currentPlayer) {\r\n        count++;\r\n      } else {\r\n        break;\r\n      }\r\n    }\r\n\r\n    // Verifica a dire칞칚o oposta\r\n    for (let i = 1; i < 4; i++) {\r\n      const r = row - i * rowDir;\r\n      const c = col - i * colDir;\r\n      if (r >= 0 && r < ROWS && c >= 0 && c < COLS && board[r][c] === currentPlayer) {\r\n        count++;\r\n      } else {\r\n        break;\r\n      }\r\n    }\r\n\r\n    return count >= 4; // Se tiver 4 pe칞as consecutivas\r\n  };\r\n\r\n  // Fun칞칚o para o bot jogar automaticamente\r\n  const botPlay = () => {\r\n    if (gameOver || currentPlayer === '游댮') return; // O bot s칩 joga quando for a vez dele (游리)\r\n\r\n    let colIndex = -1;\r\n    // Bot escolhe a primeira coluna dispon칤vel\r\n    for (let col = 0; col < COLS; col++) {\r\n      for (let row = ROWS - 1; row >= 0; row--) {\r\n        if (!board[row][col]) {\r\n          colIndex = col;\r\n          break;\r\n        }\r\n      }\r\n      if (colIndex !== -1) break;\r\n    }\r\n\r\n    // Faz a jogada do bot\r\n    if (colIndex !== -1) {\r\n      handleColumnClick(colIndex);\r\n    }\r\n  };\r\n\r\n  // Se o oponente for um bot, ele joga automaticamente ap칩s o jogador humano\r\n  useEffect(() => {\r\n    if (opponent === '2' && currentPlayer === '游리') {\r\n      const timeout = setTimeout(() => {\r\n        botPlay();\r\n      }, 500); // Delay para dar tempo de ver a jogada do jogador\r\n      return () => clearTimeout(timeout);\r\n    }\r\n  }, [currentPlayer, opponent, board]);\r\n\r\n  return (\r\n    <div>\r\n      <div className=\"game-board\">\r\n        {board.map((row, rowIndex) => (\r\n          <div key={rowIndex} className=\"board-row\" style={{ display: 'flex' }}>\r\n            {row.map((cell, colIndex) => (\r\n              <div\r\n                key={colIndex}\r\n                onClick={() => handleColumnClick(colIndex)}\r\n                className=\"board-cell\"\r\n                style={{\r\n                  width: 60,\r\n                  height: 60,\r\n                  backgroundColor: '#1e3a8a',\r\n                  border: '2px solid white',\r\n                  display: 'flex',\r\n                  alignItems: 'center',\r\n                  justifyContent: 'center',\r\n                  fontSize: '30px',\r\n                  cursor: gameOver ? 'not-allowed' : 'pointer',\r\n                }}\r\n              >\r\n                {cell}\r\n              </div>\r\n            ))}\r\n          </div>\r\n        ))}\r\n      </div>\r\n\r\n      {/* Exibe o bot칚o de reiniciar quando o jogo terminar */}\r\n      {gameOver && (\r\n        <div style={{ marginTop: \"20px\", textAlign: \"center\" }}>\r\n          <button onClick={resetGame}>Reiniciar Jogo</button>\r\n        </div>\r\n      )}\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default GameBoard;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}