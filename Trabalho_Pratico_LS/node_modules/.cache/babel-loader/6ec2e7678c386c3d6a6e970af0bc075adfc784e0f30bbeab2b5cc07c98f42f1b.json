{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\andre\\\\TrabalhoLS\\\\Trabalho_Pratico_LS\\\\src\\\\components\\\\gameboard\\\\GameBoard.component.jsx\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect, useRef } from \"react\"; // Importa hooks e React\nimport WinnerModal from \"../Confetis/WinnerModal.component\"; // Importa componente modal do vencedor\nimport \"./game-board.css\"; // Importa estilos do tabuleiro\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst ROWS = 6; // N√∫mero de linhas do tabuleiro\nconst COLS = 7; // N√∫mero de colunas do tabuleiro\nconst MAX_TIME = 10; // Tempo m√°ximo por turno (em segundos)\n\nfunction GameBoard({\n  // Componente GameBoard com props de configura√ß√£o\n  opponent,\n  // Nome do oponente (n√£o usado diretamente)\n  player1Name,\n  // Nome do jogador 1\n  player2Name,\n  // Nome do jogador 2\n  player1Color,\n  // Cor do jogador 1\n  player2Color // Cor do jogador 2\n}) {\n  _s();\n  const generateSpecialCells = (count = 5) => {\n    // Gera c√©lulas especiais aleat√≥rias\n    const setCoords = new Set(); // Conjunto para evitar coordenadas repetidas\n    while (setCoords.size < count) {\n      // Continua at√© gerar a quantidade desejada\n      const r = Math.floor(Math.random() * ROWS); // Linha aleat√≥ria\n      const c = Math.floor(Math.random() * COLS); // Coluna aleat√≥ria\n      setCoords.add(`${r}-${c}`); // Adiciona coordenada ao conjunto\n    }\n    return Array.from(setCoords).map(s => {\n      // Converte para array de objetos {row, col}\n      const [row, col] = s.split(\"-\").map(Number); // Separa e converte para n√∫mero\n      return {\n        row,\n        col\n      }; // Retorna objeto com linha e coluna\n    });\n  };\n  const getRandomStartingPlayer = () =>\n  // Escolhe jogador inicial aleatoriamente\n  Math.random() < 0.5 // 50% de chance para cada jogador\n  ? {\n    name: player1Name,\n    color: player1Color\n  } // Retorna jogador 1\n  : {\n    name: player2Name,\n    color: player2Color\n  }; // Retorna jogador 2\n\n  const [specialCells, setSpecialCells] = useState(() =>\n  // Estado das c√©lulas especiais\n  generateSpecialCells() // Inicializa com c√©lulas aleat√≥rias\n  );\n  const [board, setBoard] = useState(\n  // Estado do tabuleiro\n  Array(ROWS).fill().map(() => Array(COLS).fill(null)) // Cria matriz 6x7 com valores nulos\n  );\n  const [currentPlayer, setCurrentPlayer] = useState(\n  // Estado do jogador atual\n  getRandomStartingPlayer() // Inicializa com jogador aleat√≥rio\n  );\n  const [gameOver, setGameOver] = useState(false); // Estado de fim de jogo\n  const [highlightedCol, setHighlightedCol] = useState(null); // Coluna destacada ao passar o mouse\n  const [timeElapsed, setTimeElapsed] = useState(0); // Tempo decorrido do turno\n  const [winner, setWinner] = useState(null); // Armazena o vencedor\n\n  const timerRef = useRef(null); // Refer√™ncia ao timer (intervalo)\n\n  useEffect(() => {\n    // Efeito que reinicia o timer a cada turno\n    clearInterval(timerRef.current); // Limpa o timer anterior\n    setTimeElapsed(0); // Reinicia contador\n\n    if (!gameOver) {\n      // Se o jogo n√£o acabou\n      timerRef.current = setInterval(() => {\n        // Cria novo intervalo\n        setTimeElapsed(prev => {\n          // Atualiza tempo a cada segundo\n          if (prev + 1 >= MAX_TIME) {\n            // Se tempo acabou\n            clearInterval(timerRef.current); // Para o timer\n            setCurrentPlayer(p =>\n            // Alterna jogador atual\n            p.color === player1Color ? {\n              name: player2Name,\n              color: player2Color\n            } : {\n              name: player1Name,\n              color: player1Color\n            });\n            return 0; // Reinicia tempo para pr√≥ximo turno\n          }\n          return prev + 1; // Incrementa tempo\n        });\n      }, 1000); // A cada 1 segundo\n    }\n    return () => clearInterval(timerRef.current); // Limpa o timer ao desmontar ou alterar\n  }, [currentPlayer, gameOver]); // Depend√™ncias: jogador ou fim do jogo\n\n  const resetGame = () => {\n    // Fun√ß√£o para reiniciar o jogo\n    setBoard(Array(ROWS).fill().map(() => Array(COLS).fill(null))); // Reseta o tabuleiro\n    setCurrentPlayer(getRandomStartingPlayer()); // Escolhe novo jogador inicial\n    setGameOver(false); // Reinicia estado de fim de jogo\n    setHighlightedCol(null); // Remove destaque da coluna\n    setWinner(null); // Remove vencedor\n    setSpecialCells(generateSpecialCells()); // Gera novas c√©lulas especiais\n  };\n  const handleColumnClick = colIndex => {\n    // Trata clique em uma coluna\n    if (gameOver) return; // Ignora se jogo terminou\n    for (let row = ROWS - 1; row >= 0; row--) {\n      // Percorre de baixo para cima\n      if (!board[row][colIndex]) {\n        // Se c√©lula estiver vazia\n        const newBoard = board.map(r => [...r]); // Cria c√≥pia do tabuleiro\n        newBoard[row][colIndex] = currentPlayer.color; // Marca c√©lula com cor do jogador\n        setBoard(newBoard); // Atualiza o estado do tabuleiro\n\n        checkForWinner(newBoard, row, colIndex); // Verifica se houve vencedor\n\n        const isSpecial = specialCells.some(\n        // Verifica se c√©lula √© especial\n        cell => cell.row === row && cell.col === colIndex);\n        if (!isSpecial) {\n          // Se n√£o for especial, troca de jogador\n          setCurrentPlayer(p => p.color === player1Color ? {\n            name: player2Name,\n            color: player2Color\n          } : {\n            name: player1Name,\n            color: player1Color\n          });\n        } else {\n          console.log(\"‚≠ê B√¥nus: joga de novo!\"); // Loga mensagem b√¥nus\n          // Jogador mant√©m a vez (n√£o troca)\n        }\n        break; // Sai do loop ap√≥s colocar pe√ßa\n      }\n    }\n  };\n  const checkForWinner = (newBoard, row, col) => {\n    // Verifica se houve vit√≥ria\n    const dirs = [\n    // Dire√ß√µes poss√≠veis para checagem\n    [0, 1],\n    // Horizontal\n    [1, 0],\n    // Vertical\n    [1, 1],\n    // Diagonal \\\n    [1, -1] // Diagonal /\n    ];\n    if (dirs.some(([dx, dy]) => checkDirection(newBoard, row, col, dx, dy))) {\n      // Verifica cada dire√ß√£o\n      setGameOver(true); // Finaliza o jogo\n      setWinner(currentPlayer.name); // Define o vencedor\n    }\n  };\n  const checkDirection = (board, row, col, dx, dy) => {\n    // Verifica pe√ßas iguais em uma dire√ß√£o\n    let count = 1; // Contador de pe√ßas iguais\n    for (let dir of [1, -1]) {\n      // Verifica nas duas dire√ß√µes\n      for (let i = 1; i < 4; i++) {\n        const r = row + i * dx * dir; // Nova linha\n        const c = col + i * dy * dir; // Nova coluna\n        if (r >= 0 && r < ROWS && c >= 0 && c < COLS && board[r][c] === currentPlayer.color // Mesma cor do jogador\n        ) {\n          count++; // Incrementa contador\n        } else break; // Para se for diferente\n      }\n    }\n    return count >= 4; // Retorna se houve 4 ou mais seguidas\n  };\n  const handleMouseMove = e => {\n    // Atualiza coluna destacada com mouse\n    const rect = e.currentTarget.getBoundingClientRect(); // Pega dimens√µes do tabuleiro\n    const x = e.clientX - rect.left; // Posi√ß√£o X do mouse relativa ao tabuleiro\n    const colWidth = rect.width / COLS; // Largura de cada coluna\n    setHighlightedCol(Math.floor(x / colWidth)); // Define coluna com base na posi√ß√£o X\n  };\n  const getColorStyle = c => {\n    // Retorna a cor de estilo do token\n    switch (c) {\n      case \"üî¥\":\n        return \"red\";\n      // Vermelho\n      case \"üü°\":\n        return \"yellow\";\n      // Amarelo\n      case \"üîµ\":\n        return \"blue\";\n      // Azul\n      default:\n        return c || \"gray\";\n      // Cor padr√£o (vazio)\n    }\n  };\n  return (\n    /*#__PURE__*/\n    // Renderiza√ß√£o do componente\n    _jsxDEV(\"div\", {\n      children: [winner &&\n      /*#__PURE__*/\n      // Exibe modal se houver vencedor\n      _jsxDEV(WinnerModal, {\n        winner: winner,\n        onClose: () => setWinner(null)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 164,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"game-info\",\n        children: [\"                                                                \", gameOver ? `Jogo encerrado - Vencedor: ${winner}` // Mensagem de fim de jogo\n        : `${currentPlayer.name} (${currentPlayer.color}) - Tempo: ${timeElapsed}s`, \"          \"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 167,\n        columnNumber: 7\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"game-board\",\n        onMouseMove: handleMouseMove,\n        children: [\"                                 \", board.map((rowArr, r) =>\n        /*#__PURE__*/\n        // Mapeia linhas\n        _jsxDEV(\"div\", {\n          className: \"board-row\",\n          children: [\"                                                    // Linha do tabuleiro */}\", rowArr.map((cell, c) => {\n            // Mapeia colunas\n            const isSpecial = specialCells.some(\n            // Verifica se c√©lula √© especial\n            cell => cell.row === r && cell.col === c);\n            return /*#__PURE__*/_jsxDEV(\"div\", {\n              className: [\"board-cell\",\n              // Classe base\n              highlightedCol === c && \"highlighted\",\n              // Destaque\n              gameOver && \"disabled\",\n              // Desativa se fim de jogo\n              isSpecial && \"special\" // Marca como especial\n              ].filter(Boolean).join(\" \") // Junta as classes v√°lidas\n              ,\n              onClick: () => handleColumnClick(c) // Clique para jogar\n              ,\n              onDragOver: e => e.preventDefault() // Suporte a drop\n              ,\n              onDrop: () => handleColumnClick(c) // Drop para jogar\n              ,\n              style: {\n                color: cell ? getColorStyle(cell) : undefined\n              } // Cor da pe√ßa\n              ,\n              children: [cell, \"                                                                         // Mostra pe\\xE7a (emoji) */}\"]\n            }, c, true, {\n              fileName: _jsxFileName,\n              lineNumber: 181,\n              columnNumber: 17\n            }, this);\n          })]\n        }, r, true, {\n          fileName: _jsxFileName,\n          lineNumber: 175,\n          columnNumber: 11\n        }, this))]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 173,\n        columnNumber: 7\n      }, this), gameOver &&\n      /*#__PURE__*/\n      // Se o jogo acabou, mostra bot√µes\n      _jsxDEV(\"div\", {\n        className: \"game-over-button\",\n        children: [/*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: resetGame,\n          children: \"Reiniciar Jogo\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 204,\n          columnNumber: 11\n        }, this), \"                                   // Bot\\xE3o para reiniciar\", /*#__PURE__*/_jsxDEV(\"button\", {\n          className: \"back-button\",\n          onClick: () => window.location.href = \"/\" // Voltar para a p√°gina inicial\n          ,\n          children: \"\\uD83C\\uDFE0 P\\xE1gina Inicial\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 205,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 203,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 162,\n      columnNumber: 5\n    }, this)\n  );\n}\n_s(GameBoard, \"AMPZNBDzMYEGkyk71F3YNYnKaIg=\");\n_c = GameBoard;\nexport default GameBoard; // Exporta componente GameBoard\nvar _c;\n$RefreshReg$(_c, \"GameBoard\");","map":{"version":3,"names":["React","useState","useEffect","useRef","WinnerModal","jsxDEV","_jsxDEV","ROWS","COLS","MAX_TIME","GameBoard","opponent","player1Name","player2Name","player1Color","player2Color","_s","generateSpecialCells","count","setCoords","Set","size","r","Math","floor","random","c","add","Array","from","map","s","row","col","split","Number","getRandomStartingPlayer","name","color","specialCells","setSpecialCells","board","setBoard","fill","currentPlayer","setCurrentPlayer","gameOver","setGameOver","highlightedCol","setHighlightedCol","timeElapsed","setTimeElapsed","winner","setWinner","timerRef","clearInterval","current","setInterval","prev","p","resetGame","handleColumnClick","colIndex","newBoard","checkForWinner","isSpecial","some","cell","console","log","dirs","dx","dy","checkDirection","dir","i","handleMouseMove","e","rect","currentTarget","getBoundingClientRect","x","clientX","left","colWidth","width","getColorStyle","children","onClose","fileName","_jsxFileName","lineNumber","columnNumber","className","onMouseMove","rowArr","filter","Boolean","join","onClick","onDragOver","preventDefault","onDrop","style","undefined","window","location","href","_c","$RefreshReg$"],"sources":["C:/Users/andre/TrabalhoLS/Trabalho_Pratico_LS/src/components/gameboard/GameBoard.component.jsx"],"sourcesContent":["import React, { useState, useEffect, useRef } from \"react\";                                     // Importa hooks e React\r\nimport WinnerModal from \"../Confetis/WinnerModal.component\";                                   // Importa componente modal do vencedor\r\nimport \"./game-board.css\";                                                                     // Importa estilos do tabuleiro\r\n\r\nconst ROWS = 6;                                                                                 // N√∫mero de linhas do tabuleiro\r\nconst COLS = 7;                                                                                 // N√∫mero de colunas do tabuleiro\r\nconst MAX_TIME = 10;                                                                            // Tempo m√°ximo por turno (em segundos)\r\n\r\nfunction GameBoard({                                                                             // Componente GameBoard com props de configura√ß√£o\r\n  opponent,                                                                                      // Nome do oponente (n√£o usado diretamente)\r\n  player1Name,                                                                                   // Nome do jogador 1\r\n  player2Name,                                                                                   // Nome do jogador 2\r\n  player1Color,                                                                                  // Cor do jogador 1\r\n  player2Color,                                                                                  // Cor do jogador 2\r\n}) {\r\n\r\n  const generateSpecialCells = (count = 5) => {                                                  // Gera c√©lulas especiais aleat√≥rias\r\n    const setCoords = new Set();                                                                 // Conjunto para evitar coordenadas repetidas\r\n    while (setCoords.size < count) {                                                             // Continua at√© gerar a quantidade desejada\r\n      const r = Math.floor(Math.random() * ROWS);                                                // Linha aleat√≥ria\r\n      const c = Math.floor(Math.random() * COLS);                                                // Coluna aleat√≥ria\r\n      setCoords.add(`${r}-${c}`);                                                                // Adiciona coordenada ao conjunto\r\n    }\r\n    return Array.from(setCoords).map((s) => {                                                    // Converte para array de objetos {row, col}\r\n      const [row, col] = s.split(\"-\").map(Number);                                               // Separa e converte para n√∫mero\r\n      return { row, col };                                                                       // Retorna objeto com linha e coluna\r\n    });\r\n  };\r\n\r\n  const getRandomStartingPlayer = () =>                                                          // Escolhe jogador inicial aleatoriamente\r\n    Math.random() < 0.5                                                                          // 50% de chance para cada jogador\r\n      ? { name: player1Name, color: player1Color }                                               // Retorna jogador 1\r\n      : { name: player2Name, color: player2Color };                                              // Retorna jogador 2\r\n\r\n  const [specialCells, setSpecialCells] = useState(() =>                                         // Estado das c√©lulas especiais\r\n    generateSpecialCells()                                                                       // Inicializa com c√©lulas aleat√≥rias\r\n  );\r\n  const [board, setBoard] = useState(                                                            // Estado do tabuleiro\r\n    Array(ROWS).fill().map(() => Array(COLS).fill(null))                                         // Cria matriz 6x7 com valores nulos\r\n  );\r\n  const [currentPlayer, setCurrentPlayer] = useState(                                            // Estado do jogador atual\r\n    getRandomStartingPlayer()                                                                    // Inicializa com jogador aleat√≥rio\r\n  );\r\n  const [gameOver, setGameOver] = useState(false);                                               // Estado de fim de jogo\r\n  const [highlightedCol, setHighlightedCol] = useState(null);                                    // Coluna destacada ao passar o mouse\r\n  const [timeElapsed, setTimeElapsed] = useState(0);                                             // Tempo decorrido do turno\r\n  const [winner, setWinner] = useState(null);                                                    // Armazena o vencedor\r\n\r\n  const timerRef = useRef(null);                                                                 // Refer√™ncia ao timer (intervalo)\r\n\r\n  useEffect(() => {                                                                              // Efeito que reinicia o timer a cada turno\r\n    clearInterval(timerRef.current);                                                             // Limpa o timer anterior\r\n    setTimeElapsed(0);                                                                           // Reinicia contador\r\n\r\n    if (!gameOver) {                                                                             // Se o jogo n√£o acabou\r\n      timerRef.current = setInterval(() => {                                                     // Cria novo intervalo\r\n        setTimeElapsed((prev) => {                                                               // Atualiza tempo a cada segundo\r\n          if (prev + 1 >= MAX_TIME) {                                                            // Se tempo acabou\r\n            clearInterval(timerRef.current);                                                     // Para o timer\r\n            setCurrentPlayer((p) =>                                                              // Alterna jogador atual\r\n              p.color === player1Color\r\n                ? { name: player2Name, color: player2Color }\r\n                : { name: player1Name, color: player1Color }\r\n            );\r\n            return 0;                                                                            // Reinicia tempo para pr√≥ximo turno\r\n          }\r\n          return prev + 1;                                                                       // Incrementa tempo\r\n        });\r\n      }, 1000);                                                                                   // A cada 1 segundo\r\n    }\r\n\r\n    return () => clearInterval(timerRef.current);                                                // Limpa o timer ao desmontar ou alterar\r\n  }, [currentPlayer, gameOver]);                                                                 // Depend√™ncias: jogador ou fim do jogo\r\n\r\n  const resetGame = () => {                                                                      // Fun√ß√£o para reiniciar o jogo\r\n    setBoard(Array(ROWS).fill().map(() => Array(COLS).fill(null)));                              // Reseta o tabuleiro\r\n    setCurrentPlayer(getRandomStartingPlayer());                                                 // Escolhe novo jogador inicial\r\n    setGameOver(false);                                                                          // Reinicia estado de fim de jogo\r\n    setHighlightedCol(null);                                                                     // Remove destaque da coluna\r\n    setWinner(null);                                                                             // Remove vencedor\r\n    setSpecialCells(generateSpecialCells());                                                     // Gera novas c√©lulas especiais\r\n  };\r\n\r\n  const handleColumnClick = (colIndex) => {                                                      // Trata clique em uma coluna\r\n    if (gameOver) return;                                                                        // Ignora se jogo terminou\r\n    for (let row = ROWS - 1; row >= 0; row--) {                                                  // Percorre de baixo para cima\r\n      if (!board[row][colIndex]) {                                                               // Se c√©lula estiver vazia\r\n        const newBoard = board.map((r) => [...r]);                                               // Cria c√≥pia do tabuleiro\r\n        newBoard[row][colIndex] = currentPlayer.color;                                           // Marca c√©lula com cor do jogador\r\n        setBoard(newBoard);                                                                      // Atualiza o estado do tabuleiro\r\n\r\n        checkForWinner(newBoard, row, colIndex);                                                 // Verifica se houve vencedor\r\n\r\n        const isSpecial = specialCells.some(                                                     // Verifica se c√©lula √© especial\r\n          (cell) => cell.row === row && cell.col === colIndex\r\n        );\r\n\r\n        if (!isSpecial) {                                                                        // Se n√£o for especial, troca de jogador\r\n          setCurrentPlayer((p) =>\r\n            p.color === player1Color\r\n              ? { name: player2Name, color: player2Color }\r\n              : { name: player1Name, color: player1Color }\r\n          );\r\n        } else {\r\n          console.log(\"‚≠ê B√¥nus: joga de novo!\");                                                 // Loga mensagem b√¥nus\r\n          // Jogador mant√©m a vez (n√£o troca)\r\n        }\r\n\r\n        break;                                                                                    // Sai do loop ap√≥s colocar pe√ßa\r\n      }\r\n    }\r\n  };\r\n\r\n  const checkForWinner = (newBoard, row, col) => {                                               // Verifica se houve vit√≥ria\r\n    const dirs = [                                                                               // Dire√ß√µes poss√≠veis para checagem\r\n      [0, 1],                                                                                     // Horizontal\r\n      [1, 0],                                                                                     // Vertical\r\n      [1, 1],                                                                                     // Diagonal \\\r\n      [1, -1],                                                                                    // Diagonal /\r\n    ];\r\n    if (dirs.some(([dx, dy]) => checkDirection(newBoard, row, col, dx, dy))) {                   // Verifica cada dire√ß√£o\r\n      setGameOver(true);                                                                         // Finaliza o jogo\r\n      setWinner(currentPlayer.name);                                                             // Define o vencedor\r\n    }\r\n  };\r\n\r\n  const checkDirection = (board, row, col, dx, dy) => {                                          // Verifica pe√ßas iguais em uma dire√ß√£o\r\n    let count = 1;                                                                               // Contador de pe√ßas iguais\r\n    for (let dir of [1, -1]) {                                                                   // Verifica nas duas dire√ß√µes\r\n      for (let i = 1; i < 4; i++) {                                                              \r\n        const r = row + i * dx * dir;                                                            // Nova linha\r\n        const c = col + i * dy * dir;                                                            // Nova coluna\r\n        if (\r\n          r >= 0 && r < ROWS &&\r\n          c >= 0 && c < COLS &&\r\n          board[r][c] === currentPlayer.color                                                    // Mesma cor do jogador\r\n        ) {\r\n          count++;                                                                               // Incrementa contador\r\n        } else break;                                                                            // Para se for diferente\r\n      }\r\n    }\r\n    return count >= 4;                                                                           // Retorna se houve 4 ou mais seguidas\r\n  };\r\n\r\n  const handleMouseMove = (e) => {                                                               // Atualiza coluna destacada com mouse\r\n    const rect = e.currentTarget.getBoundingClientRect();                                        // Pega dimens√µes do tabuleiro\r\n    const x = e.clientX - rect.left;                                                             // Posi√ß√£o X do mouse relativa ao tabuleiro\r\n    const colWidth = rect.width / COLS;                                                          // Largura de cada coluna\r\n    setHighlightedCol(Math.floor(x / colWidth));                                                 // Define coluna com base na posi√ß√£o X\r\n  };\r\n\r\n  const getColorStyle = (c) => {                                                                 // Retorna a cor de estilo do token\r\n    switch (c) {\r\n      case \"üî¥\": return \"red\";                                                                   // Vermelho\r\n      case \"üü°\": return \"yellow\";                                                                // Amarelo\r\n      case \"üîµ\": return \"blue\";                                                                  // Azul\r\n      default: return c || \"gray\";                                                               // Cor padr√£o (vazio)\r\n    }\r\n  };\r\n\r\n  return (                                                                                       // Renderiza√ß√£o do componente\r\n    <div>\r\n      {winner && (                                                                               // Exibe modal se houver vencedor\r\n        <WinnerModal winner={winner} onClose={() => setWinner(null)} />\r\n      )}\r\n\r\n      <div className=\"game-info\">                                                                {/* Informa√ß√µes do jogo */}\r\n        {gameOver\r\n          ? `Jogo encerrado - Vencedor: ${winner}`                                               // Mensagem de fim de jogo\r\n          : `${currentPlayer.name} (${currentPlayer.color}) - Tempo: ${timeElapsed}s`}          {/* Jogador atual e tempo restante */}\r\n      </div>\r\n\r\n      <div className=\"game-board\" onMouseMove={handleMouseMove}>                                 {/* √Årea do tabuleiro */}\r\n        {board.map((rowArr, r) => (                                                              // Mapeia linhas\r\n          <div key={r} className=\"board-row\">                                                    // Linha do tabuleiro */}\r\n            {rowArr.map((cell, c) => {                                                           // Mapeia colunas\r\n              const isSpecial = specialCells.some(                                               // Verifica se c√©lula √© especial\r\n                (cell) => cell.row === r && cell.col === c\r\n              );\r\n              return (\r\n                <div\r\n                  key={c}\r\n                  className={[\r\n                    \"board-cell\",                                                                // Classe base\r\n                    highlightedCol === c && \"highlighted\",                                       // Destaque\r\n                    gameOver && \"disabled\",                                                      // Desativa se fim de jogo\r\n                    isSpecial && \"special\",                                                      // Marca como especial\r\n                  ].filter(Boolean).join(\" \")}                                                   // Junta as classes v√°lidas\r\n                  onClick={() => handleColumnClick(c)}                                           // Clique para jogar\r\n                  onDragOver={(e) => e.preventDefault()}                                         // Suporte a drop\r\n                  onDrop={() => handleColumnClick(c)}                                            // Drop para jogar\r\n                  style={{ color: cell ? getColorStyle(cell) : undefined }}                     // Cor da pe√ßa\r\n                >\r\n                  {cell}                                                                         // Mostra pe√ßa (emoji) */}\r\n                </div>\r\n              );\r\n            })}\r\n          </div>\r\n        ))}\r\n      </div>\r\n\r\n      {gameOver && (                                                                             // Se o jogo acabou, mostra bot√µes\r\n        <div className=\"game-over-button\">\r\n          <button onClick={resetGame}>Reiniciar Jogo</button>                                   // Bot√£o para reiniciar\r\n          <button\r\n            className=\"back-button\"\r\n            onClick={() => (window.location.href = \"/\")}                                        // Voltar para a p√°gina inicial\r\n          >\r\n            üè† P√°gina Inicial\r\n          </button>\r\n        </div>\r\n      )}\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default GameBoard;                                                                       // Exporta componente GameBoard\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}