{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\andre\\\\TrabalhoLS\\\\Trabalho_Pratico_LS\\\\src\\\\components\\\\gameboard\\\\GameBoard.component.jsx\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from \"react\";\nimport \"./game-board.css\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst ROWS = 6;\nconst COLS = 7;\nfunction GameBoard({\n  opponent,\n  player1Name,\n  player2Name,\n  player1Color,\n  player2Color\n}) {\n  _s();\n  /*\r\n  const [board, setBoard] = useState(Array(ROWS).fill().map(() => Array(COLS).fill(null)));\r\n  const [currentPlayer, setCurrentPlayer] = useState({ name: player1Name, color: player1Color });\r\n  const [gameOver, setGameOver] = useState(false);\r\n  const [highlightedCol, setHighlightedCol] = useState(null);\r\n  const [timeElapsed, setTimeElapsed] = useState(0); // Tempo da jogada\r\n    const resetGame = () => {\r\n    setBoard(Array(ROWS).fill().map(() => Array(COLS).fill(null)));\r\n    setCurrentPlayer({ name: player1Name, color: player1Color });\r\n    setGameOver(false);\r\n    setHighlightedCol(null);\r\n    setTimeElapsed(0);\r\n  };\r\n    const handleColumnClick = (colIndex) => {\r\n    if (gameOver) return;\r\n      for (let row = ROWS - 1; row >= 0; row--) {\r\n      if (!board[row][colIndex]) {\r\n        const newBoard = board.map((r) => [...r]);\r\n        newBoard[row][colIndex] = currentPlayer.color;\r\n        setBoard(newBoard);\r\n        checkForWinner(newBoard, row, colIndex);\r\n        setCurrentPlayer(currentPlayer.color === player1Color\r\n          ? { name: player2Name, color: player2Color }\r\n          : { name: player1Name, color: player1Color });\r\n        setTimeElapsed(0); // Reseta o timer a cada jogada vÃ¡lida\r\n        break;\r\n      }\r\n    }\r\n  };\r\n    const checkForWinner = (newBoard, row, col) => {\r\n    if (\r\n      checkDirection(newBoard, row, col, 0, 1) ||\r\n      checkDirection(newBoard, row, col, 0, -1) ||\r\n      checkDirection(newBoard, row, col, 1, 0) ||\r\n      checkDirection(newBoard, row, col, 1, 1) ||\r\n      checkDirection(newBoard, row, col, 1, -1)\r\n    ) {\r\n      setGameOver(true);\r\n      alert(`${currentPlayer.name} venceu!`);\r\n      return;\r\n    }\r\n  };\r\n    const checkDirection = (board, row, col, rowDir, colDir) => {\r\n    let count = 1;\r\n      for (let i = 1; i < 4; i++) {\r\n      const r = row + i * rowDir;\r\n      const c = col + i * colDir;\r\n      if (r >= 0 && r < ROWS && c >= 0 && c < COLS && board[r][c] === currentPlayer.color) {\r\n        count++;\r\n      } else {\r\n        break;\r\n      }\r\n    }\r\n      for (let i = 1; i < 4; i++) {\r\n      const r = row - i * rowDir;\r\n      const c = col - i * colDir;\r\n      if (r >= 0 && r < ROWS && c >= 0 && c < COLS && board[r][c] === currentPlayer.color) {\r\n        count++;\r\n      } else {\r\n        break;\r\n      }\r\n    }\r\n      return count >= 4;\r\n  };\r\n  /* Bot ser mais inteligente*/\n  const botPlay = () => {\n    if (gameOver || currentPlayer.color !== player2Color) return;\n    let colIndex = -1;\n    for (let col = 0; col < COLS; col++) {\n      for (let row = ROWS - 1; row >= 0; row--) {\n        if (!board[row][col]) {\n          colIndex = col;\n          break;\n        }\n      }\n      if (colIndex !== -1) break;\n    }\n    if (colIndex !== -1) {\n      handleColumnClick(colIndex);\n    }\n  };\n  useEffect(() => {\n    if (opponent === '2' && currentPlayer.color === player2Color) {\n      const timeout = setTimeout(() => {\n        botPlay();\n      }, 500);\n      return () => clearTimeout(timeout);\n    }\n  }, [currentPlayer, opponent, board]);\n\n  // UseEffect para o timer da jogada\n  useEffect(() => {\n    if (gameOver) return;\n    setTimeElapsed(0); // Resetar tempo ao trocar jogador\n\n    const interval = setInterval(() => {\n      setTimeElapsed(prev => {\n        if (prev >= 10) {\n          // Passa a vez automaticamente\n          setCurrentPlayer(currentPlayer.color === player1Color ? {\n            name: player2Name,\n            color: player2Color\n          } : {\n            name: player1Name,\n            color: player1Color\n          });\n          return 0;\n        }\n        return prev + 1;\n      });\n    }, 1000);\n    return () => clearInterval(interval);\n  }, [currentPlayer, gameOver]);\n  const handleMouseMove = e => {\n    const boardRect = e.target.getBoundingClientRect();\n    const x = e.clientX - boardRect.left;\n    const colIndex = Math.floor(x / (boardRect.width / COLS));\n    setHighlightedCol(colIndex);\n  };\n  const getColorStyle = color => {\n    switch (color) {\n      case 'ðŸ”´':\n        return 'red';\n      case 'ðŸŸ¡':\n        return 'yellow';\n      case 'ðŸ”µ':\n        return 'blue';\n      default:\n        return color || 'gray';\n      // aceita cor CSS direto\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      style: {\n        marginBottom: 10,\n        fontWeight: 'bold',\n        textAlign: 'center'\n      },\n      children: gameOver ? \"Jogo encerrado\" : `${currentPlayer.name} (${currentPlayer.color}) - Tempo da jogada: ${timeElapsed} seg`\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 151,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"draggable-piece\",\n      draggable: true,\n      onDragStart: e => e.dataTransfer.setData(\"text/plain\", currentPlayer.color),\n      style: {\n        width: 60,\n        height: 60,\n        backgroundColor: getColorStyle(currentPlayer.color),\n        borderRadius: '50%',\n        border: '2px solid white',\n        margin: '0 auto',\n        marginBottom: 10,\n        display: 'flex',\n        alignItems: 'center',\n        justifyContent: 'center',\n        fontSize: '30px',\n        cursor: 'grab'\n      }\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 157,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"game-board\",\n      onMouseMove: handleMouseMove,\n      style: {\n        position: 'relative'\n      },\n      children: [board.map((row, rowIndex) => /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"board-row\",\n        style: {\n          display: 'flex'\n        },\n        children: row.map((cell, colIndex) => /*#__PURE__*/_jsxDEV(\"div\", {\n          onClick: () => handleColumnClick(colIndex),\n          className: `board-cell ${highlightedCol === colIndex ? 'highlighted' : ''}`,\n          style: {\n            width: 60,\n            height: 60,\n            backgroundColor: '#1e3a8a',\n            border: '2px solid white',\n            display: 'flex',\n            alignItems: 'center',\n            justifyContent: 'center',\n            fontSize: '30px',\n            cursor: gameOver ? 'not-allowed' : 'pointer'\n          },\n          children: cell\n        }, colIndex, false, {\n          fileName: _jsxFileName,\n          lineNumber: 184,\n          columnNumber: 15\n        }, this))\n      }, rowIndex, false, {\n        fileName: _jsxFileName,\n        lineNumber: 182,\n        columnNumber: 11\n      }, this)), highlightedCol !== null && /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"highlight-piece\",\n        style: {\n          position: 'absolute',\n          top: -60,\n          left: highlightedCol * 60,\n          width: 60,\n          height: 60,\n          backgroundColor: getColorStyle(currentPlayer.color),\n          borderRadius: '50%',\n          border: '2px solid white'\n        }\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 207,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 176,\n      columnNumber: 7\n    }, this), gameOver && /*#__PURE__*/_jsxDEV(\"div\", {\n      style: {\n        marginTop: \"20px\",\n        textAlign: \"center\"\n      },\n      children: /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: resetGame,\n        children: \"Reiniciar Jogo\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 225,\n        columnNumber: 11\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 224,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 149,\n    columnNumber: 5\n  }, this);\n}\n_s(GameBoard, \"3ubReDTFssvu4DHeldAg55cW/CI=\");\n_c = GameBoard;\nexport default GameBoard;\nvar _c;\n$RefreshReg$(_c, \"GameBoard\");","map":{"version":3,"names":["React","useState","useEffect","jsxDEV","_jsxDEV","ROWS","COLS","GameBoard","opponent","player1Name","player2Name","player1Color","player2Color","_s","botPlay","gameOver","currentPlayer","color","colIndex","col","row","board","handleColumnClick","timeout","setTimeout","clearTimeout","setTimeElapsed","interval","setInterval","prev","setCurrentPlayer","name","clearInterval","handleMouseMove","e","boardRect","target","getBoundingClientRect","x","clientX","left","Math","floor","width","setHighlightedCol","getColorStyle","children","style","marginBottom","fontWeight","textAlign","timeElapsed","fileName","_jsxFileName","lineNumber","columnNumber","className","draggable","onDragStart","dataTransfer","setData","height","backgroundColor","borderRadius","border","margin","display","alignItems","justifyContent","fontSize","cursor","onMouseMove","position","map","rowIndex","cell","onClick","highlightedCol","top","marginTop","resetGame","_c","$RefreshReg$"],"sources":["C:/Users/andre/TrabalhoLS/Trabalho_Pratico_LS/src/components/gameboard/GameBoard.component.jsx"],"sourcesContent":["import React, { useState, useEffect } from \"react\";\r\nimport \"./game-board.css\";\r\n\r\nconst ROWS = 6;\r\nconst COLS = 7;\r\n\r\nfunction GameBoard({ opponent, player1Name, player2Name, player1Color, player2Color }) {\r\n  /*\r\n  const [board, setBoard] = useState(Array(ROWS).fill().map(() => Array(COLS).fill(null)));\r\n  const [currentPlayer, setCurrentPlayer] = useState({ name: player1Name, color: player1Color });\r\n  const [gameOver, setGameOver] = useState(false);\r\n  const [highlightedCol, setHighlightedCol] = useState(null);\r\n  const [timeElapsed, setTimeElapsed] = useState(0); // Tempo da jogada\r\n\r\n  const resetGame = () => {\r\n    setBoard(Array(ROWS).fill().map(() => Array(COLS).fill(null)));\r\n    setCurrentPlayer({ name: player1Name, color: player1Color });\r\n    setGameOver(false);\r\n    setHighlightedCol(null);\r\n    setTimeElapsed(0);\r\n  };\r\n\r\n  const handleColumnClick = (colIndex) => {\r\n    if (gameOver) return;\r\n\r\n    for (let row = ROWS - 1; row >= 0; row--) {\r\n      if (!board[row][colIndex]) {\r\n        const newBoard = board.map((r) => [...r]);\r\n        newBoard[row][colIndex] = currentPlayer.color;\r\n        setBoard(newBoard);\r\n        checkForWinner(newBoard, row, colIndex);\r\n        setCurrentPlayer(currentPlayer.color === player1Color\r\n          ? { name: player2Name, color: player2Color }\r\n          : { name: player1Name, color: player1Color });\r\n        setTimeElapsed(0); // Reseta o timer a cada jogada vÃ¡lida\r\n        break;\r\n      }\r\n    }\r\n  };\r\n\r\n  const checkForWinner = (newBoard, row, col) => {\r\n    if (\r\n      checkDirection(newBoard, row, col, 0, 1) ||\r\n      checkDirection(newBoard, row, col, 0, -1) ||\r\n      checkDirection(newBoard, row, col, 1, 0) ||\r\n      checkDirection(newBoard, row, col, 1, 1) ||\r\n      checkDirection(newBoard, row, col, 1, -1)\r\n    ) {\r\n      setGameOver(true);\r\n      alert(`${currentPlayer.name} venceu!`);\r\n      return;\r\n    }\r\n  };\r\n\r\n  const checkDirection = (board, row, col, rowDir, colDir) => {\r\n    let count = 1;\r\n\r\n    for (let i = 1; i < 4; i++) {\r\n      const r = row + i * rowDir;\r\n      const c = col + i * colDir;\r\n      if (r >= 0 && r < ROWS && c >= 0 && c < COLS && board[r][c] === currentPlayer.color) {\r\n        count++;\r\n      } else {\r\n        break;\r\n      }\r\n    }\r\n\r\n    for (let i = 1; i < 4; i++) {\r\n      const r = row - i * rowDir;\r\n      const c = col - i * colDir;\r\n      if (r >= 0 && r < ROWS && c >= 0 && c < COLS && board[r][c] === currentPlayer.color) {\r\n        count++;\r\n      } else {\r\n        break;\r\n      }\r\n    }\r\n\r\n    return count >= 4;\r\n  };\r\n/* Bot ser mais inteligente*/ \r\n  const botPlay = () => {\r\n    if (gameOver || currentPlayer.color !== player2Color) return;\r\n\r\n    let colIndex = -1;\r\n    for (let col = 0; col < COLS; col++) {\r\n      for (let row = ROWS - 1; row >= 0; row--) {\r\n        if (!board[row][col]) {\r\n          colIndex = col;\r\n          break;\r\n        }\r\n      }\r\n      if (colIndex !== -1) break;\r\n    }\r\n\r\n    if (colIndex !== -1) {\r\n      handleColumnClick(colIndex);\r\n    }\r\n  };\r\n\r\n  useEffect(() => {\r\n    if (opponent === '2' && currentPlayer.color === player2Color) {\r\n      const timeout = setTimeout(() => {\r\n        botPlay();\r\n      }, 500);\r\n      return () => clearTimeout(timeout);\r\n    }\r\n  }, [currentPlayer, opponent, board]);\r\n\r\n  // UseEffect para o timer da jogada\r\n  useEffect(() => {\r\n    if (gameOver) return;\r\n\r\n    setTimeElapsed(0); // Resetar tempo ao trocar jogador\r\n\r\n    const interval = setInterval(() => {\r\n      setTimeElapsed(prev => {\r\n        if (prev >= 10) {\r\n          // Passa a vez automaticamente\r\n          setCurrentPlayer(currentPlayer.color === player1Color\r\n            ? { name: player2Name, color: player2Color }\r\n            : { name: player1Name, color: player1Color });\r\n          return 0;\r\n        }\r\n        return prev + 1;\r\n      });\r\n    }, 1000);\r\n\r\n    return () => clearInterval(interval);\r\n  }, [currentPlayer, gameOver]);\r\n\r\n  const handleMouseMove = (e) => {\r\n    const boardRect = e.target.getBoundingClientRect();\r\n    const x = e.clientX - boardRect.left;\r\n    const colIndex = Math.floor(x / (boardRect.width / COLS));\r\n    setHighlightedCol(colIndex);\r\n  };\r\n\r\n const getColorStyle = (color) => {\r\n  switch(color) {\r\n    case 'ðŸ”´': return 'red';\r\n    case 'ðŸŸ¡': return 'yellow';\r\n    case 'ðŸ”µ': return 'blue';\r\n    default: return color || 'gray'; // aceita cor CSS direto\r\n  }\r\n};\r\n\r\n\r\n  return (\r\n    <div>\r\n      {/* Exibir tempo da jogada */}\r\n      <div style={{ marginBottom: 10, fontWeight: 'bold', textAlign: 'center' }}>\r\n        {gameOver\r\n          ? \"Jogo encerrado\"\r\n          : `${currentPlayer.name} (${currentPlayer.color}) - Tempo da jogada: ${timeElapsed} seg`}\r\n      </div>\r\n\r\n      <div\r\n        className=\"draggable-piece\"\r\n        draggable\r\n        onDragStart={(e) => e.dataTransfer.setData(\"text/plain\", currentPlayer.color)}\r\n        style={{\r\n          width: 60,\r\n          height: 60,\r\n          backgroundColor: getColorStyle(currentPlayer.color),\r\n          borderRadius: '50%',\r\n          border: '2px solid white',\r\n          margin: '0 auto',\r\n          marginBottom: 10,\r\n          display: 'flex',\r\n          alignItems: 'center',\r\n          justifyContent: 'center',\r\n          fontSize: '30px',\r\n          cursor: 'grab',\r\n        }}\r\n      ></div>\r\n      <div\r\n        className=\"game-board\"\r\n        onMouseMove={handleMouseMove}\r\n        style={{ position: 'relative' }}\r\n      >\r\n        {board.map((row, rowIndex) => (\r\n          <div key={rowIndex} className=\"board-row\" style={{ display: 'flex' }}>\r\n            {row.map((cell, colIndex) => (\r\n              <div\r\n                key={colIndex}\r\n                onClick={() => handleColumnClick(colIndex)}\r\n                className={`board-cell ${highlightedCol === colIndex ? 'highlighted' : ''}`}\r\n                style={{\r\n                  width: 60,\r\n                  height: 60,\r\n                  backgroundColor: '#1e3a8a',\r\n                  border: '2px solid white',\r\n                  display: 'flex',\r\n                  alignItems: 'center',\r\n                  justifyContent: 'center',\r\n                  fontSize: '30px',\r\n                  cursor: gameOver ? 'not-allowed' : 'pointer',\r\n                }}\r\n              >\r\n                {cell}\r\n              </div>\r\n            ))}\r\n          </div>\r\n        ))}\r\n\r\n        {highlightedCol !== null && (\r\n          <div\r\n            className=\"highlight-piece\"\r\n            style={{\r\n              position: 'absolute',\r\n              top: -60,\r\n              left: highlightedCol * 60,\r\n              width: 60,\r\n              height: 60,\r\n              backgroundColor: getColorStyle(currentPlayer.color),\r\n              borderRadius: '50%',\r\n              border: '2px solid white',\r\n            }}\r\n          ></div>\r\n        )}\r\n      </div>\r\n\r\n      {gameOver && (\r\n        <div style={{ marginTop: \"20px\", textAlign: \"center\" }}>\r\n          <button onClick={resetGame}>Reiniciar Jogo</button>\r\n        </div>\r\n      )}\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default GameBoard;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}