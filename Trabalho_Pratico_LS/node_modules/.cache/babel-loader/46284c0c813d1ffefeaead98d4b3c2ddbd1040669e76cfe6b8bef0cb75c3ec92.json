{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\andre\\\\TrabalhoLS\\\\Trabalho_Pratico_LS\\\\src\\\\components\\\\gameboard\\\\GameBoard.component.jsx\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from \"react\";\nimport \"./game-board.css\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst ROWS = 6;\nconst COLS = 7;\nfunction GameBoard({\n  opponent\n}) {\n  _s();\n  const [board, setBoard] = useState(Array(ROWS).fill().map(() => Array(COLS).fill(null)));\n  const [currentPlayer, setCurrentPlayer] = useState('ðŸ”´');\n  const [gameOver, setGameOver] = useState(false);\n  const [highlightedCol, setHighlightedCol] = useState(null); // Coluna destacada\n\n  // FunÃ§Ã£o para reiniciar o jogo\n  const resetGame = () => {\n    setBoard(Array(ROWS).fill().map(() => Array(COLS).fill(null)));\n    setCurrentPlayer('ðŸ”´');\n    setGameOver(false);\n    setHighlightedCol(null); // Resetando a coluna destacada\n  };\n\n  // FunÃ§Ã£o chamada ao clicar em uma coluna\n  const handleColumnClick = colIndex => {\n    if (gameOver) return;\n    for (let row = ROWS - 1; row >= 0; row--) {\n      if (!board[row][colIndex]) {\n        const newBoard = board.map(r => [...r]);\n        newBoard[row][colIndex] = currentPlayer;\n        setBoard(newBoard);\n        setCurrentPlayer(currentPlayer === 'ðŸ”´' ? 'ðŸŸ¡' : 'ðŸ”´');\n        checkForWinner(newBoard, row, colIndex);\n        break;\n      }\n    }\n  };\n\n  // FunÃ§Ã£o para verificar se alguÃ©m ganhou\n  const checkForWinner = (newBoard, row, col) => {\n    if (checkDirection(newBoard, row, col, 0, 1) ||\n    // Horizontal (direita)\n    checkDirection(newBoard, row, col, 0, -1) ||\n    // Horizontal (esquerda)\n    checkDirection(newBoard, row, col, 1, 0) ||\n    // Vertical (para baixo)\n    checkDirection(newBoard, row, col, 1, 1) ||\n    // Diagonal crescente\n    checkDirection(newBoard, row, col, 1, -1)) {\n      // Diagonal decrescente\n      setGameOver(true);\n      alert(`${currentPlayer} venceu!`);\n      return;\n    }\n  };\n\n  // FunÃ§Ã£o para verificar uma direÃ§Ã£o especÃ­fica\n  const checkDirection = (board, row, col, rowDir, colDir) => {\n    let count = 1;\n\n    // Verifica uma direÃ§Ã£o (horizontal, vertical ou diagonal)\n    for (let i = 1; i < 4; i++) {\n      const r = row + i * rowDir;\n      const c = col + i * colDir;\n      if (r >= 0 && r < ROWS && c >= 0 && c < COLS && board[r][c] === currentPlayer) {\n        count++;\n      } else {\n        break;\n      }\n    }\n\n    // Verifica a direÃ§Ã£o oposta\n    for (let i = 1; i < 4; i++) {\n      const r = row - i * rowDir;\n      const c = col - i * colDir;\n      if (r >= 0 && r < ROWS && c >= 0 && c < COLS && board[r][c] === currentPlayer) {\n        count++;\n      } else {\n        break;\n      }\n    }\n    return count >= 4; // Se tiver 4 peÃ§as consecutivas\n  };\n\n  // FunÃ§Ã£o para o bot jogar automaticamente\n  const botPlay = () => {\n    if (gameOver || currentPlayer === 'ðŸ”´') return; // O bot sÃ³ joga quando for a vez dele (ðŸŸ¡)\n\n    let colIndex = -1;\n    // Bot escolhe a primeira coluna disponÃ­vel\n    for (let col = 0; col < COLS; col++) {\n      for (let row = ROWS - 1; row >= 0; row--) {\n        if (!board[row][col]) {\n          colIndex = col;\n          break;\n        }\n      }\n      if (colIndex !== -1) break;\n    }\n\n    // Faz a jogada do bot\n    if (colIndex !== -1) {\n      handleColumnClick(colIndex);\n    }\n  };\n\n  // Se o oponente for um bot, ele joga automaticamente apÃ³s o jogador humano\n  useEffect(() => {\n    if (opponent === '2' && currentPlayer === 'ðŸŸ¡') {\n      const timeout = setTimeout(() => {\n        botPlay();\n      }, 500); // Delay para dar tempo de ver a jogada do jogador\n      return () => clearTimeout(timeout);\n    }\n  }, [currentPlayer, opponent, board]);\n\n  // Atualiza a coluna destacada quando o mouse move\n  const handleMouseMove = e => {\n    const boardRect = e.target.getBoundingClientRect();\n    const x = e.clientX - boardRect.left;\n    const colIndex = Math.floor(x / (boardRect.width / COLS));\n    setHighlightedCol(colIndex);\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"game-board\",\n      onMouseMove: handleMouseMove // Evento de movimento do mouse\n      ,\n      style: {\n        position: 'relative'\n      },\n      children: [board.map((row, rowIndex) => /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"board-row\",\n        style: {\n          display: 'flex'\n        },\n        children: row.map((cell, colIndex) => /*#__PURE__*/_jsxDEV(\"div\", {\n          onClick: () => handleColumnClick(colIndex),\n          className: `board-cell ${highlightedCol === colIndex ? 'highlighted' : ''}`,\n          style: {\n            width: 60,\n            height: 60,\n            backgroundColor: '#1e3a8a',\n            border: '2px solid white',\n            display: 'flex',\n            alignItems: 'center',\n            justifyContent: 'center',\n            fontSize: '30px',\n            cursor: gameOver ? 'not-allowed' : 'pointer'\n          },\n          children: cell\n        }, colIndex, false, {\n          fileName: _jsxFileName,\n          lineNumber: 129,\n          columnNumber: 15\n        }, this))\n      }, rowIndex, false, {\n        fileName: _jsxFileName,\n        lineNumber: 127,\n        columnNumber: 11\n      }, this)), highlightedCol !== null && /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"highlight-piece\",\n        style: {\n          position: 'absolute',\n          top: -60,\n          // Acima do tabuleiro\n          left: highlightedCol * 60,\n          // Alinha com a coluna\n          width: 60,\n          height: 60,\n          backgroundColor: currentPlayer === 'ðŸ”´' ? 'red' : 'yellow',\n          borderRadius: '50%',\n          border: '2px solid white'\n        }\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 153,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 121,\n      columnNumber: 7\n    }, this), gameOver && /*#__PURE__*/_jsxDEV(\"div\", {\n      style: {\n        marginTop: \"20px\",\n        textAlign: \"center\"\n      },\n      children: /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: resetGame,\n        children: \"Reiniciar Jogo\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 172,\n        columnNumber: 11\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 171,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 120,\n    columnNumber: 5\n  }, this);\n}\n_s(GameBoard, \"gsagJkYubPDq3MI7/b3MCHjgjzo=\");\n_c = GameBoard;\nexport default GameBoard;\nvar _c;\n$RefreshReg$(_c, \"GameBoard\");","map":{"version":3,"names":["React","useState","useEffect","jsxDEV","_jsxDEV","ROWS","COLS","GameBoard","opponent","_s","board","setBoard","Array","fill","map","currentPlayer","setCurrentPlayer","gameOver","setGameOver","highlightedCol","setHighlightedCol","resetGame","handleColumnClick","colIndex","row","newBoard","r","checkForWinner","col","checkDirection","alert","rowDir","colDir","count","i","c","botPlay","timeout","setTimeout","clearTimeout","handleMouseMove","e","boardRect","target","getBoundingClientRect","x","clientX","left","Math","floor","width","children","className","onMouseMove","style","position","rowIndex","display","cell","onClick","height","backgroundColor","border","alignItems","justifyContent","fontSize","cursor","fileName","_jsxFileName","lineNumber","columnNumber","top","borderRadius","marginTop","textAlign","_c","$RefreshReg$"],"sources":["C:/Users/andre/TrabalhoLS/Trabalho_Pratico_LS/src/components/gameboard/GameBoard.component.jsx"],"sourcesContent":["import React, { useState, useEffect } from \"react\";\r\nimport \"./game-board.css\";\r\n\r\nconst ROWS = 6;\r\nconst COLS = 7;\r\n\r\nfunction GameBoard({ opponent }) {\r\n  const [board, setBoard] = useState(Array(ROWS).fill().map(() => Array(COLS).fill(null)));\r\n  const [currentPlayer, setCurrentPlayer] = useState('ðŸ”´');\r\n  const [gameOver, setGameOver] = useState(false);\r\n  const [highlightedCol, setHighlightedCol] = useState(null);  // Coluna destacada\r\n\r\n  // FunÃ§Ã£o para reiniciar o jogo\r\n  const resetGame = () => {\r\n    setBoard(Array(ROWS).fill().map(() => Array(COLS).fill(null)));\r\n    setCurrentPlayer('ðŸ”´');\r\n    setGameOver(false);\r\n    setHighlightedCol(null);  // Resetando a coluna destacada\r\n  };\r\n\r\n  // FunÃ§Ã£o chamada ao clicar em uma coluna\r\n  const handleColumnClick = (colIndex) => {\r\n    if (gameOver) return;\r\n\r\n    for (let row = ROWS - 1; row >= 0; row--) {\r\n      if (!board[row][colIndex]) {\r\n        const newBoard = board.map((r) => [...r]);\r\n        newBoard[row][colIndex] = currentPlayer;\r\n        setBoard(newBoard);\r\n        setCurrentPlayer(currentPlayer === 'ðŸ”´' ? 'ðŸŸ¡' : 'ðŸ”´');\r\n        checkForWinner(newBoard, row, colIndex);\r\n        break;\r\n      }\r\n    }\r\n  };\r\n\r\n  // FunÃ§Ã£o para verificar se alguÃ©m ganhou\r\n  const checkForWinner = (newBoard, row, col) => {\r\n    if (checkDirection(newBoard, row, col, 0, 1) || // Horizontal (direita)\r\n        checkDirection(newBoard, row, col, 0, -1) || // Horizontal (esquerda)\r\n        checkDirection(newBoard, row, col, 1, 0) || // Vertical (para baixo)\r\n        checkDirection(newBoard, row, col, 1, 1) || // Diagonal crescente\r\n        checkDirection(newBoard, row, col, 1, -1)) { // Diagonal decrescente\r\n      setGameOver(true);\r\n      alert(`${currentPlayer} venceu!`);\r\n      return;\r\n    }\r\n  };\r\n\r\n  // FunÃ§Ã£o para verificar uma direÃ§Ã£o especÃ­fica\r\n  const checkDirection = (board, row, col, rowDir, colDir) => {\r\n    let count = 1;\r\n    \r\n    // Verifica uma direÃ§Ã£o (horizontal, vertical ou diagonal)\r\n    for (let i = 1; i < 4; i++) {\r\n      const r = row + i * rowDir;\r\n      const c = col + i * colDir;\r\n      if (r >= 0 && r < ROWS && c >= 0 && c < COLS && board[r][c] === currentPlayer) {\r\n        count++;\r\n      } else {\r\n        break;\r\n      }\r\n    }\r\n\r\n    // Verifica a direÃ§Ã£o oposta\r\n    for (let i = 1; i < 4; i++) {\r\n      const r = row - i * rowDir;\r\n      const c = col - i * colDir;\r\n      if (r >= 0 && r < ROWS && c >= 0 && c < COLS && board[r][c] === currentPlayer) {\r\n        count++;\r\n      } else {\r\n        break;\r\n      }\r\n    }\r\n\r\n    return count >= 4; // Se tiver 4 peÃ§as consecutivas\r\n  };\r\n\r\n  // FunÃ§Ã£o para o bot jogar automaticamente\r\n  const botPlay = () => {\r\n    if (gameOver || currentPlayer === 'ðŸ”´') return; // O bot sÃ³ joga quando for a vez dele (ðŸŸ¡)\r\n\r\n    let colIndex = -1;\r\n    // Bot escolhe a primeira coluna disponÃ­vel\r\n    for (let col = 0; col < COLS; col++) {\r\n      for (let row = ROWS - 1; row >= 0; row--) {\r\n        if (!board[row][col]) {\r\n          colIndex = col;\r\n          break;\r\n        }\r\n      }\r\n      if (colIndex !== -1) break;\r\n    }\r\n\r\n    // Faz a jogada do bot\r\n    if (colIndex !== -1) {\r\n      handleColumnClick(colIndex);\r\n    }\r\n  };\r\n\r\n  // Se o oponente for um bot, ele joga automaticamente apÃ³s o jogador humano\r\n  useEffect(() => {\r\n    if (opponent === '2' && currentPlayer === 'ðŸŸ¡') {\r\n      const timeout = setTimeout(() => {\r\n        botPlay();\r\n      }, 500); // Delay para dar tempo de ver a jogada do jogador\r\n      return () => clearTimeout(timeout);\r\n    }\r\n  }, [currentPlayer, opponent, board]);\r\n\r\n  // Atualiza a coluna destacada quando o mouse move\r\n  const handleMouseMove = (e) => {\r\n    const boardRect = e.target.getBoundingClientRect();\r\n    const x = e.clientX - boardRect.left;\r\n    const colIndex = Math.floor(x / (boardRect.width / COLS));\r\n    setHighlightedCol(colIndex);\r\n  };\r\n\r\n  return (\r\n    <div>\r\n      <div\r\n        className=\"game-board\"\r\n        onMouseMove={handleMouseMove} // Evento de movimento do mouse\r\n        style={{ position: 'relative' }}\r\n      >\r\n        {board.map((row, rowIndex) => (\r\n          <div key={rowIndex} className=\"board-row\" style={{ display: 'flex' }}>\r\n            {row.map((cell, colIndex) => (\r\n              <div\r\n                key={colIndex}\r\n                onClick={() => handleColumnClick(colIndex)}\r\n                className={`board-cell ${highlightedCol === colIndex ? 'highlighted' : ''}`}\r\n                style={{\r\n                  width: 60,\r\n                  height: 60,\r\n                  backgroundColor: '#1e3a8a',\r\n                  border: '2px solid white',\r\n                  display: 'flex',\r\n                  alignItems: 'center',\r\n                  justifyContent: 'center',\r\n                  fontSize: '30px',\r\n                  cursor: gameOver ? 'not-allowed' : 'pointer',\r\n                }}\r\n              >\r\n                {cell}\r\n              </div>\r\n            ))}\r\n          </div>\r\n        ))}\r\n\r\n        {/* Mostrar a peÃ§a \"flutuante\" ou a seta indicando a coluna selecionada */}\r\n        {highlightedCol !== null && (\r\n          <div\r\n            className=\"highlight-piece\"\r\n            style={{\r\n              position: 'absolute',\r\n              top: -60, // Acima do tabuleiro\r\n              left: highlightedCol * 60, // Alinha com a coluna\r\n              width: 60,\r\n              height: 60,\r\n              backgroundColor: currentPlayer === 'ðŸ”´' ? 'red' : 'yellow',\r\n              borderRadius: '50%',\r\n              border: '2px solid white',\r\n            }}\r\n          ></div>\r\n        )}\r\n      </div>\r\n\r\n      {/* Exibe o botÃ£o de reiniciar quando o jogo terminar */}\r\n      {gameOver && (\r\n        <div style={{ marginTop: \"20px\", textAlign: \"center\" }}>\r\n          <button onClick={resetGame}>Reiniciar Jogo</button>\r\n        </div>\r\n      )}\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default GameBoard;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}